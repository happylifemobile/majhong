package tutorial2;
//一定要读的内容：所有来往于客户端与服务器的TCP数据包都必须以5个数字开头，这是保留的头格式，头格式总共是20个字节。
//头格式的第一个数字的作用是用来定位后续跟的二进制对应的protobuf的包格式，这样保证了可扩展性，这一位称之为首位保留位
//头格式的后面四个数字的作用是保留的，可以用于特殊定义的一些例外处理，从而省去解析后续二进制的过程

// 为了服务器的保证可扩展性和Ddos防御准备，后台服务器的角色分成中心服务器和游戏负载服务器，两种服务器都不止一台
// 用户首先登陆中心服务器，然后可以进行与游戏引擎无关的操作，包括：
//查看个人信息，查看个人流水，查看个人战绩等
//也包括，进入房间与创建房间，这两个接口在成功操作的情况下会返回游戏负载服务器的真正Ip地址与TCP端口号
//客户端登陆游戏负载服务器进行游戏内的操作。

//中心服务器的所有请求与接口都支持TCP与HTTP访问两种方式，如客户端以HTTP格式方式，则将数据包格式中的url作为访问地址，将剩余参与打成json包以POST格式发送即可。
//游戏服务器的所有接口仅支持TCP访问方式，因为游戏服务器以不定时推送为主。


// game server.proto 为总体房间服务器、中心服务器的Protobuf格式列表，
// xxx_engine.proto 为xxx游戏的服务器客户端交互protobuf格式列表


message game_output_info {//此格式可能以顶层格式直接出现在接口交互中（服务器端到客户端），请注意，当首位保留位为11的时候，表示格式为此格式
    optional int32 room_status=1;//房间的状态，见真值表
    optional ju_status after = 2 ;//变化后的状态，变化前的状态删去
    repeated game_input_info  changes = 3 ;//最近的两次或者一次变化
    optional money_change_list_unit money_inout_list=4;//最近一次钱的变化
    optional int32 current_step=6;//当前走到第几步
    optional bool is_over=7;//是不是已经结束
    repeated win_unit win_method = 8 ;//如果已经结束，赢家的赢的方法
    optional int32  winner_point = 9 ;//赢家的位置
    optional int32  winner_id = 10 ;//赢家的全局id
    optional int32  score = 11 ;//赢的番数
    optional int32  seconds = 12 ;//应该空几秒加入默认定时任务，如果是0则代表不加入定时任务
    repeated ready_to_start ready_list=15;//开始进入游戏的状态
    repeated user_info user_profile=16;//从桌面上能看到的玩家信息
    optional int32 ju_num=17;//当前的局数
    optional int32 rtype=18;//当前的局数



    optional bool code=13;//在发送主动发送消息之后会出现的错误码，推送中没有
    optional bool msg=14;//错误码对应的错误信息
}

message ju_status{
    repeated player_dict player_list=1;
    optional int32 point=2;
    optional pai   fresh_drop_pai     =3;
    optional int32 east_order         =4;
    optional int32 zhuang_num=5;
    optional int32 win_limit=6;
    optional pai   zhufeng=7;
    repeated int32 dice=8;
    optional int32 dui_pai_should_left=9;
    repeated int32 ting_list=10;
    optional int32 last_dui_pai_position=11;
    optional int32 quan_num=12;
    optional int32 ju_num=13;
    optional int32 current_step=14;

}

message ready_to_start{
    optional int32 user_id=1;
    optional bool ready = 2;//是否准备好开始

}

message user_info {
    optional string nickname = 1 ;
    optional int32  sex = 2 ;
    optional string photo_url = 3 ;
    optional int32  level = 4 ;
    optional int32  score = 5 ;
    optional int32  card = 6 ;
    optional int32  zuan = 7 ;
    optional int32  gold = 8 ;
    optional int32  total_score_win = 9 ;
    optional int32  total_score_lose = 10 ;
    optional int32  user_point = 11 ;
    optional int32  user_id = 12 ;
    optional string  session_id = 13 ; //大部分时候空缺，只有在登陆接口的时候才存在
}


message player_dict{
    optional int32 user_id=1;
    optional int32 user_point=2;
    optional pai_list_dict pai_list_dict=3;
    repeated remind_unit remind_list=4;
    repeated remind_unit room_remind_list =5 ;//提醒队列
}

message pai_list_dict{
    repeated pai_list liang_pai = 1 ;
    repeated pai qi_pai = 2 ;
    repeated pai hand_pai = 3 ;
    repeated pai zhuifeng_pai = 4 ;
}

message remind_unit{
    optional string remind_type =1;
    optional pai remind_pai =2;
    repeated ting_dict ting_dict_list =3;   //这个是是一处修改，ting_dict_list应该是一个列表
}

message ting_dict{
    optional pai pai_select_drop =1;
    repeated ting_score ting_score =2;
}

message ting_score{
    optional pai win_pai =1;
    optional int32 score =2;
}




message  game_input_info{//此格式可能以顶层格式直接出现在接口交互中（客户端到服务端），请注意，当首位保留位为11的时候，表示格式为此格式
    optional string action = 1 ;
    optional int32 user_point = 2 ;
    optional int32 user_id=3;
    optional int32 room_num = 4;
    optional string session_id = 5 ;//从+中心服务器获得，用于验证用户的有效性，开始的时候可以不设置。

    optional pai target_pai = 6 ;
    optional int32 current_step= 7 ;
    optional bool reverse= 8 ;
}


message win_unit {
    optional int32 num = 1 ;
    optional string method = 2 ;
}

message money_change_unit {
    optional int32 user_point = 1 ;
    optional int32 user_id = 2 ;
    optional int32 amount = 3 ;
}
message money_change_list_unit {
    optional int32 winner_point = 1 ;
    optional int32 winner_id = 2 ;
    optional int32 loser_point = 3 ;
    optional int32 loser_id = 4 ;
    optional int32 amount = 5 ;
}


message pai_list{
    repeated pai pai = 1 ;
}


message pai {
    optional int32 num = 1 ;
    optional string type = 2 ;
}